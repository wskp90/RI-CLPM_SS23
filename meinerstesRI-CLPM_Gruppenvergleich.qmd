---
title: "mein erster Output"
author: "Name"
format: html # Für Word: 'html' einfach durch 'docx' ersetzen
editor: source
execute: 
  echo: false
  eval: true
  warning: false
editor_options:
  chunk_output_type: console
toc: true
---

# Vorbereitung
## Pakete laden
```{r}
rm(list= ls()) # start clean ####
if (!require("pacman")) install.packages("pacman")
pacman::p_load(sjlabelled,foreign,tidyverse,sjmisc,Hmisc,panelr,gt,gtExtras,gtsummary,
               here,fs,usethis,labelled,janitor,magrittr,qs,tictoc,plm,
               psych,easystats,irr,lavaan,semTools,semPlot,broom,tidySEM)
```

## Daten laden
```{r}
orgdat = qread(paste0(Sys.getenv("FAUBOX"),"/GLES/za6838/za6838_7729.qs"))
```

## Variablen
```{r}
semdat = orgdat %>%
  select(ends_with(c("_1290","_160p","_010")) & starts_with(c("kp10","kp12","kp14")))

```

## Long-Datensatz erzeugen
```{r}
# semdat_panel = orgdat %>% 
#   select(starts_with(c("kp10","kp12","kp14","kp15","kp16")) & ends_with(c("_1290","_160p","_1500"))) %>% 
#   mutate(across(everything(), ~rec(., rec = "-99,-95,-93,-71=NA;else = copy"))) %>% 
#   long_panel(., prefix = "kp", suffix = "_", periods = c("10","12","14","15","16"), label_location = "beginning")
# names(semdat_panel) = c("id","welle","klima","trust","lire")
```


## Recodieren
```{r}
semdat %<>% mutate(across(everything(), ~rec(., rec = "-99,-98,-95,-93,-92=NA;else = copy"))) # Alles Missings ersetzen
semdat = semdat %>% mutate(pol_int = rec(kp10_010, rec = "1,2=2;3=1;4,5=0")) # Politisches Interesse zur Gruppen zusammenfassen
semdat = semdat %>% mutate(pol_int = as.factor(pol_int)) # Neue Variable als Kategoische Var. definieren
```

# Output erzeugen
## Häufigkeiten
```{r}
semdat %>% select("kp10_160p") %>% frq(.,show.na = F) %>% as.data.frame() %>% gt %>% gt_theme_nytimes()
```

## Korrelation
```{r}
#| fig-width: 10
semdat %>% select(ends_with(c("_1290","_160p"))) %>% # Nur Konstrukte auswählen
  psych::cor.plot(.,stars = T)
```


## ICC-Koeffizienten
```{r}
semdat %>% 
  select(contains("_160p")) %>% irr::icc()
semdat %>% 
  select(contains("_1290")) %>% irr::icc()
```
# Variablen umbenennen
```{r}
semdat %<>% rename(x1 = kp10_160p, x2 = kp12_160p, x3 = kp14_160p,
                  y1 = kp10_1290, y2 = kp12_1290, y3 = kp14_1290)
semdat = semdat %>% mutate(group = sample(c(1, 2), size = n(), replace = TRUE))
```

# SEM
## CLPM
### Modelldefinition
```{r}
clpm.def <-
'
#LATENT FACTORS
Lx1 =~ 1*x1 #each factor loading set to 1
Lx2 =~ 1*x2 
Lx3 =~ 1*x3
Ly1 =~ 1*y1
Ly2 =~ 1*y2
Ly3 =~ 1*y3

#Resiudal Correlation
Lx1 ~~ Ly1
Lx2 ~~ Ly2
Lx3 ~~ Ly3

#Stability & Crosslagged Paths
Lx3 ~ Lx2 + Ly2
Lx2 ~ Lx1 + Ly1

Ly3 ~ Ly2 + Lx2
Ly2 ~ Ly1 + Lx1
'
```

### Modell schätzen einfach
```{r}
clpm.fit <- lavaan::sem(clpm.def, data=semdat, missing="ML", estimator = "MLR",mimic="Mplus", meanstructure = T, int.ov.free = T)
```

### Modell Fit
```{r}
broom::glance(clpm.fit) %>% select(c(cfi,tli,agfi,rmsea,srmr)) %>% 
  gt %>%
  fmt_number(decimals = 3, columns = c(cfi,tli,agfi,rmsea,srmr)) %>% gt_theme_nytimes()
```

### Koeeffizienten
```{r}
broom::tidy(clpm.fit) %>% filter(., op =="~") %>% select(., c(term,op, estimate,std.error,p.value,std.all)) %>% 
  gt %>% 
  fmt_number(decimals = 2, columns = c(estimate,std.error,std.all)) %>% fmt_number(decimals = 3, columns = p.value)
```

### Modell schätzen Gruppenvergleich
```{r}
clpmg.fit1 <- lavaan::sem(clpm.def, data=semdat, missing="ML", estimator = "MLR",mimic="Mplus", meanstructure = T, int.ov.free = T, group="pol_int")
clpmg.fit2 <- lavaan::sem(clpm.def, data=semdat, missing="ML", estimator = "MLR",mimic="Mplus", meanstructure = T, int.ov.free = T, group="pol_int", group.equal = c("regressions","lv.covariances"))
```

### Modell Fit
```{r}
broom::glance(clpmg.fit1) %>% select(c(cfi,tli,agfi,rmsea,srmr)) %>% 
  gt %>%
  fmt_number(decimals = 3, columns = c(cfi,tli,agfi,rmsea,srmr)) %>% gt_theme_nytimes()
broom::glance(clpmg.fit2) %>% select(c(cfi,tli,agfi,rmsea,srmr)) %>% 
  gt %>%
  fmt_number(decimals = 3, columns = c(cfi,tli,agfi,rmsea,srmr)) %>% gt_theme_nytimes()
lavTestLRT(clpmg.fit1,clpmg.fit2) %>% as.data.frame() %>% rownames_to_column(var = "Model") %>% gt %>% fmt_number(decimals = 3, columns = "Pr(>Chisq)")

```

### Koeeffizienten
```{r}
broom::tidy(clpmg.fit) %>% filter(., op =="~") %>% select(., c(group,term,op, estimate,std.error,p.value,std.all)) %>% 
  gt %>% 
  fmt_number(decimals = 2, columns = c(estimate,std.error,std.all)) %>% fmt_number(decimals = 3, columns = p.value) %>% gt_split(row_every_n = 8)
```


## RI-CLPM
### Modelldefinition
```{r}
riclpm.def <- '
# Create between components (random intercepts)
RIx =~ 1*x1 + 1*x2 + 1*x3
RIy =~ 1*y1 + 1*y2 + 1*y3

# Create within-person centered variables
Lx1 =~ 1*x1
Lx2 =~ 1*x2
Lx3 =~ 1*x3 
Ly1 =~ 1*y1
Ly2 =~ 1*y2
Ly3 =~ 1*y3

# Estimate lagged effects between within-person centered variables
Lx3 + Ly3 ~ Lx2 + Ly2
Lx2 + Ly2 ~ Lx1 + Ly1

# Estimate covariance between within-person centered variables at first wave
Lx1 ~~ Ly1 # Covariance

# Estimate covariances between residuals of within-person centered variables 
# (i.e., innovations)
Lx2 ~~ Ly2
Lx3 ~~ Ly3

# Estimate variance and covariance of random intercepts
RIx ~~ RIx
RIy ~~ RIy
RIx ~~ RIy

# Estimate (residual) variance of within-person centered variables
Lx1 ~~ Lx1 # Variances
Ly1 ~~ Ly1 
Lx2 ~~ Lx2 # Residual variances
Ly2 ~~ Ly2 
Lx3 ~~ Lx3 
Ly3 ~~ Ly3 '

```

### Modell schätzen
```{r}
riclpm.fit <- lavaan::lavaan(riclpm.def, data=semdat, missing="ML", estimator = "MLR", meanstructure = T, int.ov.free = T)

```

### Modell Fit
```{r}
broom::glance(riclpm.fit) %>% select(c(cfi,tli,agfi,rmsea,srmr)) %>% 
  gt %>%
  fmt_number(decimals = 3, columns = c(cfi,tli,agfi,rmsea,srmr)) %>% gt_theme_nytimes()
```


### Koeffizienten
```{r}

broom::tidy(riclpm.fit) %>% filter(., op =="~") %>% select(., c(term, op, estimate,std.error,p.value,std.all)) %>% 
  gt %>% 
  fmt_number(decimals = 2, columns = c(estimate,std.error,std.all)) %>% fmt_number(decimals = 3, columns = p.value)
```
